# -*- coding: utf-8 -*-
"""parkinsonprediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/190_koVB9h-w21o1hQAXXe9s-ju6HrApf
"""

# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
import pickle

# Load the Parkinson dataset
parkinson = pd.read_csv('parkinsons.data')

# Train Test Split
X = parkinson.drop(['status','name'], axis=1)
Y = parkinson['status']
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

# Standardization
scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

# Train the SVM model
svc = SVC()
svc.fit(X_train, y_train)

# Save the trained model and scaler to files
pickle.dump(scaler, open('standardScaler.sav', 'wb'))
pickle.dump(svc, open('modelForPrediction.sav', 'wb'))

# Function to make predictions
def predict_parkinson(data):
    np_data = np.asarray(data)
    np_data = np_data.reshape(1, -1)
    prediction = svc.predict(np_data)
    return prediction[0]

# Example usage:
input_data = [1.03983688, 0.17237666, 1.67879945, -0.83410268, -0.94428847,
              -0.73207722, -0.75558996, -0.73211087, -0.93702927, -0.90522785,
              -0.94302224, -0.83727105, -0.87945488, -0.94333241, -0.59315683,
              1.97537236, -0.29114466, 0.35627085, -1.24057161, -0.59088115,
              -2.2231008, -1.20119397]

prediction_result = predict_parkinson(input_data)

# Print the result
if prediction_result == 1:
    print("This person has Parkinson's disease.")
else:
    print("This person has no Parkinson's disease.")